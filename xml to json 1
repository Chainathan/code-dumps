Certainly! Here's the modified code for all the files:

1. `XmlData.java` in the model or domain package:

```java
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;

@XmlRootElement
public class XmlData {
    private int fieldA;
    private String fieldB;
    private String fieldC;
    private String fieldD;

    // Getters and setters
    // ...
}
```

2. `JsonData.java` in the model or domain package:

```java
public class JsonData {
    private String fieldC;

    public JsonData() {
    }

    public JsonData(String fieldC) {
        this.fieldC = fieldC;
    }

    public String getFieldC() {
        return fieldC;
    }

    public void setFieldC(String fieldC) {
        this.fieldC = fieldC;
    }
}
```

3. `XmlToJsonConverter.java`:

```java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import java.io.File;

public class XmlToJsonConverter {
    public static String convertXmlToJson(File xmlFile) throws JAXBException {
        // Create JAXB context and unmarshaller
        JAXBContext jaxbContext = JAXBContext.newInstance(XmlData.class);
        Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();

        // Parse the XML
        XmlData xmlData = (XmlData) jaxbUnmarshaller.unmarshal(xmlFile);

        // Perform conditional logic and populate JSON object
        String fieldC;
        if (xmlData.getFieldA() == 2) {
            fieldC = xmlData.getFieldB();
        } else {
            fieldC = xmlData.getFieldD();
        }

        // Create JSON object
        JsonData jsonData = new JsonData(fieldC);

        // Convert JSON object to JSON string
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.enable(SerializationFeature.INDENT_OUTPUT);
        String json = objectMapper.writeValueAsString(jsonData);

        return json;
    }
}
```

4. `ConverterController.java`:

```java
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import javax.xml.bind.JAXBException;

@RestController
public class ConverterController {
    @PostMapping("/convert")
    public String convertXmlToJson(@RequestBody String xml) {
        try {
            File xmlFile = new File("path/to/xml/file.xml"); // Specify the path to your XML file
            String json = XmlToJsonConverter.convertXmlToJson(xmlFile);
            return json;
        } catch (JAXBException e) {
            e.printStackTrace();
            return "Error converting XML to JSON";
        }
    }
}
```

Ensure that you adjust the file paths and package names according to your project structure.
