To convert XML to JSON in Java, you can use a combination of libraries such as Jackson and JAXB (Java Architecture for XML Binding). Here's an example of how you can achieve this in a Maven-based Spring Boot project:

1. Add the necessary dependencies to your Maven `pom.xml` file:

```xml
<dependencies>
    <!-- Spring Boot -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter</artifactId>
    </dependency>
    
    <!-- Jackson -->
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-databind</artifactId>
    </dependency>
    
    <!-- JAXB -->
    <dependency>
        <groupId>javax.xml.bind</groupId>
        <artifactId>jaxb-api</artifactId>
    </dependency>
</dependencies>
```

2. Create a Java class to represent the XML structure. You can annotate the class and its fields using JAXB annotations to map it to the XML structure. For example:

```java
import javax.xml.bind.annotation.XmlRootElement;

@XmlRootElement
public class XmlData {
    private int fieldA;
    private String fieldB;
    private String fieldC;
    private String fieldD;

    // Getters and setters
    // ...
}
```

3. Create a class that will handle the XML-to-JSON conversion. For example:

```java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import java.io.StringReader;

public class XmlToJsonConverter {
    public static String convertXmlToJson(String xml) throws JAXBException {
        // Create JAXB context and unmarshaller
        JAXBContext jaxbContext = JAXBContext.newInstance(XmlData.class);
        Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();

        // Parse the XML
        StringReader reader = new StringReader(xml);
        XmlData xmlData = (XmlData) jaxbUnmarshaller.unmarshal(reader);

        // Perform conditional logic and populate JSON object
        String fieldC;
        if (xmlData.getFieldA() == 2) {
            fieldC = xmlData.getFieldB();
        } else {
            fieldC = xmlData.getFieldD();
        }

        // Create JSON object
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.enable(SerializationFeature.INDENT_OUTPUT);
        String json = objectMapper.writeValueAsString(new JsonData(fieldC));

        return json;
    }

    private static class JsonData {
        private String fieldC;

        public JsonData(String fieldC) {
            this.fieldC = fieldC;
        }

        public String getFieldC() {
            return fieldC;
        }

        public void setFieldC(String fieldC) {
            this.fieldC = fieldC;
        }
    }
}
```

4. In your Spring Boot application, you can use the `XmlToJsonConverter` class to convert XML to JSON. Here's an example controller that receives an XML string and returns the corresponding JSON:

```java
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import javax.xml.bind.JAXBException;

@RestController
public class ConverterController {
    @PostMapping("/convert")
    public String convertXmlToJson(@RequestBody String xml) {
        try {
            String json = XmlToJsonConverter.convertXmlToJson(xml);
            return json;
        } catch (JAXBException e) {
            e.printStackTrace();
            return "Error converting XML to JSON";
        }
    }
}
```

With these steps, you can create an endpoint in your Spring Boot application that accepts XML as input, performs the conversion to
